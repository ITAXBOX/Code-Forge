package DrMuhamadMubarak.TheFuture.Generator.Controller;

import DrMuhamadMubarak.TheFuture.Generator.DTO.AttributeDTO;
import DrMuhamadMubarak.TheFuture.Generator.Service.ProjectAttributeService;
import DrMuhamadMubarak.TheFuture.Generator.Service.ProjectEntitiesService;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.io.IOException;

import static DrMuhamadMubarak.TheFuture.Generator.Builder.AttributeBuilder.createAttributeDTO;

@Controller
@AllArgsConstructor
public class ProjectAttributeController {

    private final ProjectEntitiesService projectEntitiesService;
    private final ProjectAttributeService projectAttributeService;

    @PostMapping("/generate-entities-from-json")
    public String generateEntitiesFromJson(
            @RequestParam("projectName") String projectName,
            @RequestParam("entitiesJson") String entitiesJson,
            Model model) {

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(entitiesJson);
            JsonNode entitiesNode = rootNode.path("entities");

            if (entitiesNode.isMissingNode() || !entitiesNode.isArray()) {
                model.addAttribute("message", "Invalid JSON format: 'entities' array is missing or invalid.");
                return "error";
            }

            for (JsonNode entityNode : entitiesNode) {
                String entityName = entityNode.path("name").asText();
                JsonNode attributesNode = entityNode.path("attributes");

                if (attributesNode.isMissingNode() || !attributesNode.isArray()) {
                    model.addAttribute("message", "Invalid JSON format: 'attributes' array is missing or invalid for entity: " + entityName);
                    return "error";
                }

                projectEntitiesService.generateEntityClass(projectName, entityName);
                projectEntitiesService.generateRepositoryClass(projectName, entityName);

                for (JsonNode attributeNode : attributesNode) {
                    AttributeDTO attribute = objectMapper.treeToValue(attributeNode, AttributeDTO.class);

                    projectAttributeService.addAttributesToEntity(projectName, entityName, attribute);
                }

                projectEntitiesService.generateServiceClass(projectName, entityName, projectAttributeService.getAttributes());
                projectEntitiesService.generateControllerClass(projectName, entityName);
                projectEntitiesService.generateUI(projectName, entityName, projectAttributeService.getAttributes());

                projectAttributeService.clearAttributes();
            }

            model.addAttribute("message", "Entities generated successfully from JSON.");
            return "result";
        } catch (IOException e) {
            model.addAttribute("message", "An error occurred while processing JSON: " + e.getMessage());
            return "error";
        }
    }

    @GetMapping("/add-attributes")
    public String showAddAttributesPage(@RequestParam("projectName") String projectName,
                                        @RequestParam("entityName") String entityName,
                                        Model model) {
        model.addAttribute("projectName", projectName);
        model.addAttribute("entityName", entityName);
        return "add-attributes";
    }

    @PostMapping("/save-attributes")
    public String saveAttributes(
            @RequestParam("projectName") String projectName,
            @RequestParam("entityName") String entityName,
            @RequestParam("action") String action,
            @RequestParam(value = "attributeName") String attributeName,
            @RequestParam(value = "dataType") String dataTypeStr,
            @RequestParam(value = "dataSize", required = false) String dataSize,
            @RequestParam(value = "defaultValue", required = false) String defaultValue,
            @RequestParam(value = "isPrimaryKey", required = false) Boolean isPrimaryKey,
            @RequestParam(value = "isNullable", required = false) Boolean isNullable,
            @RequestParam(value = "relationshipType", required = false) String relationshipTypeStr,
            @RequestParam(value = "isAutoGenerated", required = false) Boolean isAutoGenerated,
            @RequestParam(value = "relatedEntity", required = false) String relatedEntity,
            @RequestParam(value = "mappedBy", required = false) String mappedBy,
            Model model) {

        try {
            AttributeDTO attribute = createAttributeDTO(
                    attributeName, dataTypeStr, dataSize, defaultValue,
                    isPrimaryKey, isNullable, relationshipTypeStr, isAutoGenerated, relatedEntity, mappedBy
            );

            projectAttributeService.addAttributesToEntity(projectName, entityName, attribute);
            model.addAttribute("projectName", projectName);

            if ("next".equals(action)) {
                return handleNextAction(projectName, entityName, model);
            } else {
                model.addAttribute("entityName", entityName);
                return "add-attributes";
            }
        } catch (IOException e) {
            model.addAttribute("message", "An error occurred: " + e.getMessage());
            return "error";
        }
    }

    private String handleNextAction(String projectName, String entityName, Model model) throws IOException {
        projectEntitiesService.generateServiceClass(projectName, entityName, projectAttributeService.getAttributes());
        projectEntitiesService.generateControllerClass(projectName, entityName);
        projectEntitiesService.generateUI(projectName, entityName, projectAttributeService.getAttributes());

        projectAttributeService.clearAttributes();

        if (projectEntitiesService.isLastEntity(entityName)) {
            model.addAttribute("message", "Project generated successfully");
            return "result";
        } else {
            model.addAttribute("entityName", projectEntitiesService.getNextEntityName(entityName));
            return "add-attributes";
        }
    }
}