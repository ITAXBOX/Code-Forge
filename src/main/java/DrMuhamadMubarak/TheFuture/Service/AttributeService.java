package DrMuhamadMubarak.TheFuture.Service;

import DrMuhamadMubarak.TheFuture.DTO.AttributeDTO;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@Service
public class AttributeService {

    public void addAttributesToEntity(String projectName, String entityName, AttributeDTO attribute) throws IOException {
        generateOrUpdateEntityClass(projectName, entityName, attribute);
    }

    private void generateOrUpdateEntityClass(String projectName, String entityName, AttributeDTO attribute) throws IOException {
        String baseDir = "./" + projectName + "/src/main/java/com/example/" + projectName.toLowerCase() + "/models";
        Path entityFilePath = Paths.get(baseDir, entityName + ".java");

        if (!Files.exists(entityFilePath)) {
            throw new IOException("File not found: " + entityFilePath);
        }

        String entityContent = Files.readString(entityFilePath);
        StringBuilder updatedContent = new StringBuilder(entityContent);

        int classEndIndex = entityContent.lastIndexOf("}");
        if (classEndIndex == -1) {
            throw new IllegalStateException("Class end not found in file: " + entityFilePath);
        }

        String attributeField = generateFieldForAttribute(attribute);
        updatedContent.insert(classEndIndex, attributeField);

        Files.writeString(entityFilePath, updatedContent.toString());
    }

    private String generateFieldForAttribute(AttributeDTO attribute) {
        StringBuilder field = new StringBuilder();

        if (attribute.getRelationshipType() != null && !attribute.getRelationshipType().equalsIgnoreCase("NONE")) {
            field.append(generateRelationshipAnnotation(attribute)).append("\n");
        }

        if (attribute.isPrimaryKey()) {
            field.append("\n    @Id");
            if (attribute.isAutoGenerated()) {
                field.append("\n    @GeneratedValue(strategy = GenerationType.IDENTITY)");
            }
        }
        StringBuilder columnAnnotation = new StringBuilder("@Column(");

        boolean hasLength = attribute.getDataSize() != null && !attribute.getDataSize().isEmpty();
        boolean isNullable = attribute.isNullable();
        boolean hasDefaultValue = attribute.getDefaultValue() != null && !attribute.getDefaultValue().isEmpty();
        boolean hasAttributes = false;

        if ("String".equalsIgnoreCase(attribute.getDataType()) && hasLength) {
            columnAnnotation.append("length = ").append(attribute.getDataSize());
            hasAttributes = true;
        }

        if (!isNullable) {
            if (hasAttributes) {
                columnAnnotation.append(", ");
            }
            columnAnnotation.append("nullable = false");
            hasAttributes = true;
        }

        if (hasDefaultValue) {
            if (hasAttributes) {
                columnAnnotation.append(", ");
            }
            columnAnnotation.append("columnDefinition = \"").append(formatDataType(attribute))
                    .append(" default '").append(attribute.getDefaultValue()).append("'\"");
            hasAttributes = true;
        }

        columnAnnotation.append(")");

        if (hasAttributes) {
            field.append("\n    ").append(columnAnnotation);
        }

        if (!"String".equalsIgnoreCase(attribute.getDataType()) && hasLength)
            field.append("\n    ").append("@Max(").append(attribute.getDataSize()).append(")");

        field.append("\n    private ").append(formatDataType(attribute)).append(" ").append(attribute.getAttributeName()).append(";");

        field.append("\n");

        if (attribute.isDisplayInList()) {
            field.append("\n    private boolean displayInList;").append("\n");
        }

        return field.toString();
    }

    private String formatDataType(AttributeDTO attribute) {
        String dataType = attribute.getDataType();
        if (dataType == null || dataType.isEmpty()) {
            throw new IllegalArgumentException("DataType cannot be null or empty for attribute: " + attribute.getAttributeName());
        }

        return switch (dataType.toUpperCase()) {
            case "STRING" -> "String";
            case "INTEGER" -> "int";
            case "LONG" -> "long";
            case "DATE" -> "Instant";
            case "BOOLEAN" -> "boolean";
            case "DOUBLE" -> "double";
            default -> dataType;
        };
    }

    private String generateRelationshipAnnotation(AttributeDTO attribute) {
        String relationshipType = attribute.getRelationshipType();
        boolean isNullable = attribute.isNullable();
        StringBuilder annotation = new StringBuilder();

        switch (relationshipType.toUpperCase()) {
            case "MANY_TO_ONE":
                annotation.append("@ManyToOne(fetch = FetchType.LAZY)");
                if (!isNullable) {
                    annotation.append("\n    @JoinColumn(nullable = false)");
                }
                break;
            case "ONE_TO_MANY":
                annotation.append("@OneToMany(fetch = FetchType.LAZY)");
                break;
            case "ONE_TO_ONE":
                annotation.append("@OneToOne(fetch = FetchType.LAZY)");
                if (!isNullable) {
                    annotation.append("\n    @JoinColumn(nullable = false)");
                }
                break;
            case "MANY_TO_MANY":
                annotation.append("@ManyToMany(fetch = FetchType.LAZY)");
                break;
            default:
                break;
        }

        return annotation.toString();
    }

}
