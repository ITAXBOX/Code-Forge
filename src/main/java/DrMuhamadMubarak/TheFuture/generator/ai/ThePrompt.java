package DrMuhamadMubarak.TheFuture.generator.ai;

public class ThePrompt {
    private static final int ENTITY_NUMBERS = 5;

    public static final String ENTITY_NAMES_PROMPT = """
                 Given the project topic: "%s", generate a list of up to %d unique entity names that would be realistically needed for this project.
                 The list should be relevant to the domain and follow good database design principles.
            
                 Do NOT include "User" or "Role" in the list, as they will be added separately.
                 Avoid including entities that represent people (e.g., "Author", "Student", "Customer") unless they have distinct properties
                 that cannot be represented by "User".
            
                 Additionally, avoid using entity names that are forbidden or problematic in backends and databases, such as:
                 - Reserved SQL keywords (e.g., "Order", "Group", "Table", "Match").
                 - Reserved programming language keywords (e.g., "Class", "Public", "Default").
                 - Names that are too generic or ambiguous (e.g., "Data", "Object", "Entity").
            
                 Example Output:
                 ["Book", "Course", "Product"]
            
                 IMPORTANT: Return only a JSON array of entity names (strings) and nothing else.
            """.formatted("%s", ENTITY_NUMBERS);

    public static final String ENTITY_NAMES_PROMPT_WITH_DESCRIPTION = """
            Given the project topic: "%s" and the following description: "%s", generate a list of up to %d unique entity names that would be realistically needed for this project.
            The list should be relevant to the domain and follow good database design principles.
            
            Do NOT include "User" or "Role" in the list, as they will be added separately.
            Avoid including entities that represent people (e.g., "Author", "Student", "Customer") unless they have distinct properties
            that cannot be represented by "User".
            
            Additionally, avoid using entity names that are forbidden or problematic in backends and databases, such as:
            - Reserved SQL keywords (e.g., "Order", "Group", "Table", "Match").
            - Reserved programming language keywords (e.g., "Class", "Public", "Default").
            - Names that are too generic or ambiguous (e.g., "Data", "Object", "Entity").
            
            Example Output:
            ["Book", "Course", "Product"]
            
            IMPORTANT: Return only a JSON array of entity names (strings) and nothing else.
            """.formatted("%s", "%s", ENTITY_NUMBERS);

    public static final String ENTITY_DEFINITION_AND_FIX_PROMPT = """
             Based on the following entity names: %s, generate a structured JSON defining their attributes and relationships\s
             following these rules:
            \s
             - Each entity must have a unique name and a list of attributes.
             - Attributes must include `attributeName`, `dataType`, and optional fields like `isPrimaryKey`, `isAutoGenerated`, `dataSize`, and `defaultValue`.
             - Relationships **must always be defined on both sides**:
                 - **ONE_TO_MANY on one entity must have a matching MANY_TO_ONE on the other.**
                 - **MANY_TO_MANY must be properly defined with mappedBy on one side.**
                 - **ONE_TO_ONE must appear on both related entities.**
             - Ensure all relationships are marked as `isNullable: true`.
             - Dont forget that entities should have relationships with each other (if needed).
             - In `@ManyToMany`, specify the owning side (without `mappedBy`) and inverse side (with `mappedBy`).
             - Include the predefined entities `"User"` and `"Role"` exactly as they are, without modification.
            \s
             **Mandatory Relationship Fields:**
             - **MANY_TO_ONE:** Must include `@ManyToOne` with `@JoinColumn(name = "<related_entity>_id")`
             - **ONE_TO_MANY:** Must include `@OneToMany(mappedBy = "<mappedByField>")`
             - **ONE_TO_ONE:** If `mappedBy` is present, use `@OneToOne(mappedBy = "<mappedByField>")`, otherwise use `@OneToOne` with `@JoinColumn(name = "<related_entity>_id")`
             - **MANY_TO_MANY:** The owning side must define `@ManyToMany` with `@JoinTable(name = "<entity>_<related_entity>", joinColumns = @JoinColumn(name = "<entity>_id"), inverseJoinColumns = @JoinColumn(name = "<related_entity>_id"))`. The inverse side must include `@ManyToMany(mappedBy = "<mappedByField>")`.
             - **IMPORTANT:** For all relationships that require a `mappedBy` field (ONE_TO_MANY, MANY_TO_MANY, and ONE_TO_ONE when applicable), the `mappedBy` property is mandatory on the inverse side and must be provided.
            \s
             **Validation Rules:**
             - Ensure that all entities have their relationships fully defined on both sides.
             - If an entity has a `ONE_TO_MANY` relationship, the related entity must have a corresponding `MANY_TO_ONE` relationship.
             - If an entity has a `MANY_TO_MANY` relationship, both entities must define the relationship with the correct `mappedBy` attribute.
             - Ensure that no attributes are missing, especially relationship attributes like `supplier` in the `Product` entity.
            \s
             Example JSON output:
            \s
             {
               "entities": [
                 {
                   "name": "User",
                   "attributes": [
                     {
                       "attributeName": "id",
                       "dataType": "Long",
                       "isPrimaryKey": true,
                       "isAutoGenerated": true
                     },
                     {
                       "attributeName": "username",
                       "dataType": "String"
                     },
                     {
                       "attributeName": "email",
                       "dataType": "String"
                     },
                     {
                       "attributeName": "password",
                       "dataType": "String"
                     },
                     {
                       "attributeName": "roles",
                       "dataType": "Set<Role>",
                       "relationshipType": "MANY_TO_MANY",
                       "relatedEntity": "Role",
                       "isNullable": true
                     }
                   ]
                 },
                 {
                   "name": "Role",
                   "attributes": [
                     {
                       "attributeName": "id",
                       "dataType": "Long",
                       "isPrimaryKey": true,
                       "isAutoGenerated": true
                     },
                     {
                       "attributeName": "name",
                       "dataType": "String"
                     }
                   ]
                 },
                 {
                   "name": "Product",
                   "attributes": [
                     {
                       "attributeName": "id",
                       "dataType": "Long",
                       "isPrimaryKey": true,
                       "isAutoGenerated": true
                     },
                     {
                       "attributeName": "name",
                       "dataType": "String"
                     },
                     {
                       "attributeName": "supplier",
                       "dataType": "Supplier",
                       "relationshipType": "MANY_TO_ONE",
                       "relatedEntity": "Supplier",
                       "isNullable": true
                     },
                     {
                       "attributeName": "orderItems",
                       "dataType": "List<OrderItem>",
                       "relationshipType": "ONE_TO_MANY",
                       "relatedEntity": "OrderItem",
                       "mappedBy": "product",
                       "isNullable": true
                     }
                   ]
                 },
                 {
                   "name": "Supplier",
                   "attributes": [
                     {
                       "attributeName": "id",
                       "dataType": "Long",
                       "isPrimaryKey": true,
                       "isAutoGenerated": true
                     },
                     {
                       "attributeName": "name",
                       "dataType": "String"
                     },
                     {
                       "attributeName": "products",
                       "dataType": "List<Product>",
                       "relationshipType": "ONE_TO_MANY",
                       "relatedEntity": "Product",
                       "mappedBy": "supplier",
                       "isNullable": true
                     }
                   ]
                 },
                 {
                   "name": "Order",
                   "attributes": [
                     {
                       "attributeName": "id",
                       "dataType": "Long",
                       "isPrimaryKey": true,
                       "isAutoGenerated": true
                     },
                     {
                       "attributeName": "orderDate",
                       "dataType": "LocalDateTime"
                     },
                     {
                       "attributeName": "customer",
                       "dataType": "Customer",
                       "relationshipType": "MANY_TO_ONE",
                       "relatedEntity": "Customer",
                       "isNullable": true
                     },
                     {
                       "attributeName": "items",
                       "dataType": "List<OrderItem>",
                       "relationshipType": "ONE_TO_MANY",
                       "relatedEntity": "OrderItem",
                       "mappedBy": "order",
                       "isNullable": true
                     }
                   ]
                 },
                 {
                   "name": "OrderItem",
                   "attributes": [
                     {
                       "attributeName": "id",
                       "dataType": "Long",
                       "isPrimaryKey": true,
                       "isAutoGenerated": true
                     },
                     {
                       "attributeName": "quantity",
                       "dataType": "Integer"
                     },
                     {
                       "attributeName": "product",
                       "dataType": "Product",
                       "relationshipType": "MANY_TO_ONE",
                       "relatedEntity": "Product",
                       "isNullable": true
                     },
                     {
                       "attributeName": "order",
                       "dataType": "Order",
                       "relationshipType": "MANY_TO_ONE",
                       "relatedEntity": "Order",
                       "isNullable": true
                     }
                   ]
                 },
                 {
                   "name": "Customer",
                   "attributes": [
                     {
                       "attributeName": "id",
                       "dataType": "Long",
                       "isPrimaryKey": true,
                       "isAutoGenerated": true
                     },
                     {
                       "attributeName": "name",
                       "dataType": "String"
                     },
                     {
                       "attributeName": "orders",
                       "dataType": "List<Order>",
                       "relationshipType": "ONE_TO_MANY",
                       "relatedEntity": "Order",
                       "mappedBy": "customer",
                       "isNullable": true
                     },
                     {
                       "attributeName": "profile",
                       "dataType": "CustomerProfile",
                       "relationshipType": "ONE_TO_ONE",
                       "relatedEntity": "CustomerProfile",
                       "mappedBy": "customer",
                       "isNullable": true
                     }
                   ]
                 },
                 {
                   "name": "CustomerProfile",
                   "attributes": [
                     {
                       "attributeName": "id",
                       "dataType": "Long",
                       "isPrimaryKey": true,
                       "isAutoGenerated": true
                     },
                     {
                       "attributeName": "address",
                       "dataType": "String"
                     },
                     {
                       "attributeName": "customer",
                       "dataType": "Customer",
                       "relationshipType": "ONE_TO_ONE",
                       "relatedEntity": "Customer",
                       "isNullable": true
                     }
                   ]
                 }
               ]
             }
            \s
             IMPORTANT: Return only the JSON structure and nothing else. Do not include any additional text, formatting, or explanations.
            \s""";

    public static final String BEHAVIOR_PROMPT = """
            Generate ONLY method implementations for %s entity.
            Attributes: %s
            Available Repositories: %s
            
            STRICT RULES:
            1. ONLY use these exact attributes: %s
            2. NEVER use attributes/methods not in this list
            3. If unsure, throw UnsupportedOperationException()
            4. Use == for ID comparisons
            5. Format:
               @Transactional
               public ReturnType methodName(Params) {
                   Entity entity = repository.findById(id).orElseThrow();
                   // ONLY use: entity.get[Attr], entity.set[Attr], repository.method()
                   repository.save(entity);
               }
            
            EXAMPLE FOR USER (if 'email' exists but 'active' doesn't):
            @Transactional
            public void updateEmail(Long userId, String email) {
                User user = userRepository.findById(userId).orElseThrow();
                if (email == null) throw new IllegalArgumentException();
                user.setEmail(email); // ✅ ALLOWED (email is declared)
                userRepository.save(user);
            }
            
            @Transactional
            public void deactivateUser(Long userId) {
                throw new UnsupportedOperationException(); // ❌ 'active' not in attributes
            }
            
            Generate 3-5 methods for %s using ONLY:
            - Declared attributes
            - Available repositories
            - No comments
            """;
}